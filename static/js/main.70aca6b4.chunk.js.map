{"version":3,"sources":["App.tsx","index.tsx"],"names":["NETWORK","clusterApiUrl","App","provider","window","solana","isPhantom","open","getProvider","useState","logs","setLogs","addLog","useCallback","log","connection","Connection","setConnected","publicKey","setPublicKey","useEffect","connect","onlyIfTrusted","catch","err","on","toBase58","then","message","disconnect","createTransferTransaction","a","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","feePayer","anyTransaction","getRecentBlockhash","recentBlockhash","blockhash","sendTransaction","signTransaction","signed","sendRawTransaction","serialize","signature","confirmTransaction","console","warn","JSON","stringify","signMultipleTransactions","onlyFirst","Promise","all","transaction1","transaction2","signAllTransactions","txns","signMessage","data","TextEncoder","encode","res","className","onClick","map","i","rootElement","document","getElementById","render"],"mappings":"wSAiDMA,EAAUC,YAAc,gBAEf,SAASC,IACtB,IAAMC,EAdY,WAClB,GAAI,WAAYC,OAAQ,CACtB,IACMD,EADiBC,OACIC,OAC3B,GAAIF,EAASG,UACX,OAAOH,EAGXC,OAAOG,KAAK,uBAAwB,UAMnBC,GACjB,EAAwBC,mBAAmB,IAA3C,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAASC,uBACb,SAACC,GAAD,OAAiBH,GAAQ,SAACD,GAAD,4BAAcA,GAAd,CAAoB,KAAOI,SACpD,IAEIC,EAAa,IAAIC,IAAWhB,GAClC,EAAyBS,oBAAkB,GAAlCQ,EAAT,oBACA,EAAkCR,mBAA2B,MAA7D,mBAAOS,EAAP,KAAkBC,EAAlB,KAyCA,GAxCAC,qBAAU,WACR,GAAKjB,EAmCL,OAjCAA,EAASkB,QAAQ,CAAEC,eAAe,IAAQC,OAAM,SAACC,OAGjDrB,EAASsB,GAAG,WAAW,SAACP,GACtBC,EAAaD,GACbD,GAAa,GACbL,EAAO,qBAAeM,QAAf,IAAeA,OAAf,EAAeA,EAAWQ,gBAEnCvB,EAASsB,GAAG,cAAc,WACxBN,EAAa,MACbF,GAAa,GACbL,EAAO,gCAETT,EAASsB,GAAG,kBAAkB,SAACP,GAC7BC,EAAaD,GACTA,EACFN,EAAO,gDAA0CM,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAWQ,cAE5Dd,EAAO,6CAOPT,EACGkB,UACAM,MAAK,kBAAMf,EAAO,gDAClBW,OAAM,SAACC,GACNZ,EAAO,0CAA4CY,EAAII,gBAIxD,WACLzB,EAAS0B,gBAEV,CAAC1B,EAAUS,KACTT,EACH,OAAO,2DAGT,IAAM2B,EAAyB,uCAAG,8BAAAC,EAAA,yDAC3B5B,EAASe,UADkB,wDAE5Bc,GAAc,IAAIC,KAAcC,IAClCC,IAAcC,SAAS,CACrBC,WAAYlC,EAASe,UACrBoB,SAAUnC,EAASe,UACnBqB,SAAU,QAGFC,SAAWrC,EAASe,UAChCN,EAAO,4BACD6B,EAAsBT,EAXI,SAaxBjB,EAAW2B,qBAba,cAYhCD,EAAeE,gBAZiB,OAc9BC,UAd8B,kBAezBZ,GAfyB,4CAAH,qDAiBzBa,EAAe,uCAAG,gCAAAd,EAAA,+EAEMD,IAFN,UAEdE,EAFc,wEAID7B,EAAS2C,gBAAgBd,GAJxB,cAIhBe,EAJgB,OAKpBnC,EAAO,yCALa,UAMEG,EAAWiC,mBAAmBD,EAAOE,aANvC,eAMhBC,EANgB,OAOpBtC,EAAO,yBAA2BsC,EAAY,2BAP1B,UAQdnC,EAAWoC,mBAAmBD,GARhB,QASpBtC,EAAO,eAAiBsC,EAAY,cAThB,kDAWpBE,QAAQC,KAAR,MACAzC,EAAO,4BAA8B0C,KAAKC,UAAL,OAZjB,0DAAH,qDAefC,EAAwB,uCAAG,kDAAAzB,EAAA,6DAAO0B,EAAP,kDAEcC,QAAQC,IAAI,CACrD7B,IACAA,MAJ2B,sCAEtB8B,EAFsB,KAERC,EAFQ,MAMzBD,IAAgBC,EANS,qBAQvBJ,EARuB,kCASZtD,EAAS2D,oBAAoB,CAACF,IATlB,QASzBG,EATyB,gDAWZ5D,EAAS2D,oBAAoB,CACxCF,EACAC,IAbuB,QAWzBE,EAXyB,eAgB3BnD,EAAO,kCAAoC0C,KAAKC,UAAUQ,IAhB/B,0DAmB7BX,QAAQC,KAAR,MACAzC,EAAO,qCAAuC0C,KAAKC,UAAL,OApBjB,0DAAH,qDAuBxBS,EAAW,uCAAG,WAAOpC,GAAP,iBAAAG,EAAA,sEAEVkC,GAAO,IAAIC,aAAcC,OAAOvC,GAFtB,SAGEzB,EAAS6D,YAAYC,GAHvB,OAGVG,EAHU,OAIhBxD,EAAO,kBAAoB0C,KAAKC,UAAUa,IAJ1B,gDAMhBhB,QAAQC,KAAR,MACAzC,EAAO,wBAA0B0C,KAAKC,UAAL,OAPjB,yDAAH,sDAUjB,OACE,sBAAKc,UAAU,MAAf,UACE,iCACE,iDACClE,GAAYe,EACX,qCACE,gCACE,+CACA,uBACA,8BAAMA,EAAUQ,aAChB,0BAEF,wBAAQ4C,QAASzB,EAAjB,8BACA,yBAAQyB,QAAS,kBAAMd,GAAyB,IAAhD,6CACmC,OAEnC,yBAAQc,QAAS,kBAAMd,GAAyB,IAAhD,2CACiC,OAEjC,wBACEc,QAAS,kBACPN,EACE,+EAHN,0BASA,wBACEM,QAAO,sBAAE,sBAAAvC,EAAA,+EAEC5B,EAAS0B,aAFV,sDAILuB,QAAQC,KAAR,MACAzC,EAAO,uBAAyB0C,KAAKC,UAAL,OAL3B,wDADX,2BAcF,mCACE,wBACEe,QAAO,sBAAE,sBAAAvC,EAAA,+EAEC5B,EAASkB,UAFV,sDAIL+B,QAAQC,KAAR,MACAzC,EAAO,oBAAsB0C,KAAKC,UAAL,OALxB,wDADX,qCAeN,wBAAQc,UAAU,OAAlB,SACG3D,EAAK6D,KAAI,SAACzD,EAAK0D,GAAN,OACR,qBAAKH,UAAU,MAAf,SACGvD,GADuB0D,WClOpC,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAAC1E,EAAD,IAASuE,I","file":"static/js/main.70aca6b4.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport {\n  Connection,\n  PublicKey,\n  Transaction,\n  clusterApiUrl,\n  SystemProgram,\n} from \"@solana/web3.js\";\nimport \"./styles.css\";\n\ntype DisplayEncoding = \"utf8\" | \"hex\";\ntype PhantomEvent = \"disconnect\" | \"connect\" | \"accountChanged\";\ntype PhantomRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAllTransactions\"\n  | \"signMessage\";\n\ninterface ConnectOpts {\n  onlyIfTrusted: boolean;\n}\n\ninterface PhantomProvider {\n  publicKey: PublicKey | null;\n  isConnected: boolean | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  signMessage: (\n    message: Uint8Array | string,\n    display?: DisplayEncoding\n  ) => Promise<any>;\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\n}\n\nconst getProvider = (): PhantomProvider | undefined => {\n  if (\"solana\" in window) {\n    const anyWindow: any = window;\n    const provider = anyWindow.solana;\n    if (provider.isPhantom) {\n      return provider;\n    }\n  }\n  window.open(\"https://phantom.app/\", \"_blank\");\n};\n\nconst NETWORK = clusterApiUrl(\"mainnet-beta\");\n\nexport default function App() {\n  const provider = getProvider();\n  const [logs, setLogs] = useState<string[]>([]);\n  const addLog = useCallback(\n    (log: string) => setLogs((logs) => [...logs, \"> \" + log]),\n    []\n  );\n  const connection = new Connection(NETWORK);\n  const [, setConnected] = useState<boolean>(false);\n  const [publicKey, setPublicKey] = useState<PublicKey | null>(null);\n  useEffect(() => {\n    if (!provider) return;\n    // try to eagerly connect\n    provider.connect({ onlyIfTrusted: true }).catch((err) => {\n      // fail silently\n    });\n    provider.on(\"connect\", (publicKey: PublicKey) => {\n      setPublicKey(publicKey);\n      setConnected(true);\n      addLog(\"[connect] \" + publicKey?.toBase58());\n    });\n    provider.on(\"disconnect\", () => {\n      setPublicKey(null);\n      setConnected(false);\n      addLog(\"[disconnect] ðŸ‘‹\");\n    });\n    provider.on(\"accountChanged\", (publicKey: PublicKey | null) => {\n      setPublicKey(publicKey);\n      if (publicKey) {\n        addLog(\"[accountChanged] Switched account to \" + publicKey?.toBase58());\n      } else {\n        addLog(\"[accountChanged] Switched unknown account\");\n        // In this case, dapps could not to anything, or,\n        // Only re-connecting to the new account if it is trusted\n        // provider.connect({ onlyIfTrusted: true }).catch((err) => {\n        //   // fail silently\n        // });\n        // Or, always trying to reconnect\n        provider\n          .connect()\n          .then(() => addLog(\"[accountChanged] Reconnected successfully\"))\n          .catch((err) => {\n            addLog(\"[accountChanged] Failed to re-connect: \" + err.message);\n          });\n      }\n    });\n    return () => {\n      provider.disconnect();\n    };\n  }, [provider, addLog]);\n  if (!provider) {\n    return <h2>Could not find a provider</h2>;\n  }\n\n  const createTransferTransaction = async () => {\n    if (!provider.publicKey) return;\n    let transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: provider.publicKey,\n        toPubkey: provider.publicKey,\n        lamports: 100,\n      })\n    );\n    transaction.feePayer = provider.publicKey;\n    addLog(\"Getting recent blockhash\");\n    const anyTransaction: any = transaction;\n    anyTransaction.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n    return transaction;\n  };\n  const sendTransaction = async () => {\n    try {\n      const transaction = await createTransferTransaction();\n      if (!transaction) return;\n      let signed = await provider.signTransaction(transaction);\n      addLog(\"Got signature, submitting transaction\");\n      let signature = await connection.sendRawTransaction(signed.serialize());\n      addLog(\"Submitted transaction \" + signature + \", awaiting confirmation\");\n      await connection.confirmTransaction(signature);\n      addLog(\"Transaction \" + signature + \" confirmed\");\n    } catch (err) {\n      console.warn(err);\n      addLog(\"[error] sendTransaction: \" + JSON.stringify(err));\n    }\n  };\n  const signMultipleTransactions = async (onlyFirst: boolean = false) => {\n    try {\n      const [transaction1, transaction2] = await Promise.all([\n        createTransferTransaction(),\n        createTransferTransaction(),\n      ]);\n      if (transaction1 && transaction2) {\n        let txns;\n        if (onlyFirst) {\n          txns = await provider.signAllTransactions([transaction1]);\n        } else {\n          txns = await provider.signAllTransactions([\n            transaction1,\n            transaction2,\n          ]);\n        }\n        addLog(\"signMultipleTransactions txns: \" + JSON.stringify(txns));\n      }\n    } catch (err) {\n      console.warn(err);\n      addLog(\"[error] signMultipleTransactions: \" + JSON.stringify(err));\n    }\n  };\n  const signMessage = async (message: string) => {\n    try {\n      const data = new TextEncoder().encode(message);\n      const res = await provider.signMessage(data);\n      addLog(\"Message signed \" + JSON.stringify(res));\n    } catch (err) {\n      console.warn(err);\n      addLog(\"[error] signMessage: \" + JSON.stringify(err));\n    }\n  };\n  return (\n    <div className=\"App\">\n      <main>\n        <h1>Phantom Sandbox</h1>\n        {provider && publicKey ? (\n          <>\n            <div>\n              <pre>Connected as</pre>\n              <br />\n              <pre>{publicKey.toBase58()}</pre>\n              <br />\n            </div>\n            <button onClick={sendTransaction}>Send Transaction</button>\n            <button onClick={() => signMultipleTransactions(false)}>\n              Sign All Transactions (multiple){\" \"}\n            </button>\n            <button onClick={() => signMultipleTransactions(true)}>\n              Sign All Transactions (single){\" \"}\n            </button>\n            <button\n              onClick={() =>\n                signMessage(\n                  \"To avoid digital dognappers, sign below to authenticate with CryptoCorgis.\"\n                )\n              }\n            >\n              Sign Message\n            </button>\n            <button\n              onClick={async () => {\n                try {\n                  await provider.disconnect();\n                } catch (err) {\n                  console.warn(err);\n                  addLog(\"[error] disconnect: \" + JSON.stringify(err));\n                }\n              }}\n            >\n              Disconnect\n            </button>\n          </>\n        ) : (\n          <>\n            <button\n              onClick={async () => {\n                try {\n                  await provider.connect();\n                } catch (err) {\n                  console.warn(err);\n                  addLog(\"[error] connect: \" + JSON.stringify(err));\n                }\n              }}\n            >\n              Connect to Phantom\n            </button>\n          </>\n        )}\n      </main>\n      <footer className=\"logs\">\n        {logs.map((log, i) => (\n          <div className=\"log\" key={i}>\n            {log}\n          </div>\n        ))}\n      </footer>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}